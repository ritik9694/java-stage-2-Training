package com.cognizant.security.config;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.provisioning.JdbcUserDetailsManager;
import org.springframework.security.provisioning.UserDetailsManager;
import org.springframework.security.web.DefaultSecurityFilterChain;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration {

	@Autowired
	private UserDetailsService userDetailsService; //-->myuserservice
	
	@Autowired
	private DataSource dataSource;

	@Autowired
	private BCryptPasswordEncoder encoder;

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

		/*
		
		http.csrf(csrf -> csrf.disable());
		http.authorizeHttpRequests(request -> request.anyRequest().authenticated());
		//http.formLogin(Customizer.withDefaults()); ///form login for browser
		http.httpBasic(Customizer.withDefaults()); ///----->for postman to not show login page in html
		http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));//for postman it will work but browser it will not work to generate new session id
		// to wrk with sessessionCreation we have to disable form login -->only see pop up
		
		*/
		
		
		http
		   .csrf(csrf -> csrf.disable())
		   .authorizeHttpRequests(request -> request.anyRequest().authenticated())
		   //.formLogin(Customizer.withDefaults()); ///form login for browser
		   .httpBasic(Customizer.withDefaults()) ///----->for postman to not show login page in html
		   .sessionManagement(session -> 
		                             session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));//for postman it will work but browser it will not work to generate new session id
		// to wrk with sessessionCreation we have to disable form login -->only see pop up
		
		/*
	
		http.csrf(csrf -> csrf.disable());  //---->>this code isequal to lower one 
		
		Customizer<CsrfConfigurer<HttpSecurity>> csrfCustomizer = new Customizer<CsrfConfigurer<HttpSecurity>>() {
			
			@Override
			public void customize(CsrfConfigurer<HttpSecurity> customizer) {
				customizer.disable();
				
			}
		};
		
		http.csrf(csrfCustomizer);
		
		*/
		
		return http.build();
	}
	
	
	/*

	@Bean
	public UserDetailsService userDetailsService() {
		UserDetails user1 = User.withUsername("admin").password("123")
				            .passwordEncoder(pwd -> encoder.encode(pwd))
				            .roles("admin","manager").build();
		UserDetails user2 = User.withUsername("hrithik").password("1234")
				            .passwordEncoder(pwd -> encoder.encode(pwd))
				            .roles("user").build();

		UserDetailsManager userDtlsMgr = new JdbcUserDetailsManager(dataSource);
		userDtlsMgr.createUser(user1);
		userDtlsMgr.createUser(user2);
		
		return userDtlsMgr;
	} // -->this is not valid to work with database
	
	*/

	// un-authenticatedobj(Authentication obj) --> Authentication Provider -->
	// Authentication Obj (Authenticated obj)
	
	@Bean
	public AuthenticationProvider authenticationProvider() {
		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
		provider.setPasswordEncoder(NoOpPasswordEncoder.getInstance());
		provider.setUserDetailsService(userDetailsService);
		
		return provider;
	}

}
